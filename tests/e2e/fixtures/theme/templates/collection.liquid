{%- capture default_collection -%}
    {
        "id": 0,
        "handle": "all",
        "title": {{ collection.title | json }}
    }
{%- endcapture -%}

{%-
    liquid
    if collection.id
        assign collection_json = collection | json
    else
        assign collection_json = default_collection
    endif
    assign collection_json = collection_json | escape
-%}

{%- capture filter_rules -%}
    [
        {
            "name": "Color",
            "sourceName": "color",
            "sourceType": "tag",
            "filterType": "singular"
        },
        {
            "name": "Egg Group",
            "sourceName": "egg-group",
            "sourceType": "tag",
            "filterType": "AND"
        },
        {
            "name": "Type",
            "sourceName": "type",
            "sourceType": "type",
            "filterType": "OR"
        },
        {
            "name": "Vendor",
            "sourceName": "vendor",
            "sourceType": "vendor",
            "filterType": "OR"
        },
        {
            name: 'Availability',
            sourceName: 'availability',
            sourceType: 'availability',
            filterType: 'OR'
        }
    ]
{%- endcapture -%}

{%- capture custom_sort_methods -%}
    defaultSortMethods => [
        ...defaultSortMethods,
        {
            "id": "id",
            "label": "ID",
            "method": (a, b) => {
                const getProductID = product => {
                    const regex = /^id:/;
                    const tagSuffix = product.tags
                        .find(tag => regex.test(tag))
                        .replace(regex, '');
                    return Number(tagSuffix);
                };

                return getProductID(a) - getProductID(b);
            }
        }
    ]
{%- endcapture -%}

<CollectionTemplate 
    :collection="{{ collection_json }}" 
    :product-count="{{ collection.products_count }}"
    :build-sort-methods="{{ custom_sort_methods | escape }}"
    :filter-rules="{{ filter_rules | escape }}"
/>
